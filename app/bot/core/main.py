import datetime
import json
import random
import logging

from bot.core.base import save_circle, download_and_save_telegram_file, \
    get_main_keyboard, validate_name, \
    is_corporate_email, calc_timedelta_between_dates
from bot.models.cheque import Cheque
from bot.models.circle import Circle
from bot.models.contract import Contract
from bot.models.report import Report
from bot.models.user_state import UserState
from bot.tasks import send_email, send_message_to_user_generic, send_message
from project.settings import TELEGRAM_API_URL
from settings.models import Settings
import requests
from django.utils import timezone


class TelegramBotHandler:
    def __init__(self, message):
        self.message = message
        self.chat_id = message['message']['chat']['id']
        self.text = message['message'].get('text', '')
        self.user_state, _ = UserState.objects.get_or_create(
            chat_id=self.chat_id)

    def handle_start(self):
        send_message("sendMessage", {
            'chat_id': self.chat_id,
            'text': "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            'reply_markup': json.dumps({
                "keyboard": [
                    [{"text": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"}],
                ],
                "resize_keyboard": True,
                "one_time_keyboard": True
            })
        })
        self.user_state.state = None
        self.user_state.save()

    def handle_registration(self):
        send_message("sendMessage", {
            'chat_id': self.chat_id,
            'text': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã.",
            'reply_markup': json.dumps({"remove_keyboard": True})
        })
        self.user_state.state = 'waiting_for_email'
        self.user_state.save()

    def handle_waiting_for_email(self):
        if is_corporate_email(self.text):
            code = str(random.randint(100000, 999999))
            send_email.delay(self.text, code)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ –ø–æ—á—Ç—É
            send_message("sendMessage", {
                'chat_id': self.chat_id,
                'text': f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {self.text}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ."
            })
            self.user_state.email = self.text
            self.user_state.confirmation_code = code
            self.user_state.state = 'waiting_for_code'
            self.user_state.save()
        else:
            send_message("sendMessage", {
                'chat_id': self.chat_id,
                'text': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã."
            })

    def handle_waiting_for_code(self):
        if self.text == self.user_state.confirmation_code:
            self.user_state.state = "waiting_for_name"
            self.user_state.save()

            send_message("sendMessage", {
                'chat_id': self.chat_id,
                'text': "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è.\n–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü–µ—Ç—Ä–æ–≤ –ü—ë—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á' –∏–ª–∏ '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤'",
            })
        else:
            send_message("sendMessage", {
                'chat_id': self.chat_id,
                'text': "–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            })

    def handle_waiting_for_name(self):
        if validate_name(self.text):
            self.user_state.state = ""
            self.user_state.is_registered = True
            self.user_state.name = self.text
            self.user_state.save()

            send_message("sendMessage", {
                'chat_id': self.chat_id,
                'text': "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!",
            })
            send_message("sendMessage", {
                'chat_id': self.chat_id,
                'text': "–¢–µ–ø–µ—Ä—å –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —á–µ–∫",
                'reply_markup': get_main_keyboard(self.user_state)
            })
        else:
            send_message("sendMessage", {
                'chat_id': self.chat_id,
                'text': "–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            })

    def handle_status(self):
        today = timezone.now().date()
        first_day_of_current_month = today.replace(day=1)
        first_day_of_previous_month = (
                first_day_of_current_month - datetime.timedelta(
            days=1)).replace(day=1)
        host_url = Settings.get_setting("HOST_URL", "http://localhost:8000")

        send_message("sendMessage", {
            'chat_id': self.chat_id,
            'text': f"–í–∞—à–µ –∏–º—è: {self.user_state.name}"
        })

        inline_keyboard = []

        user_contracts = Contract.objects.filter(
            user=self.user_state).order_by(
            "uploaded_at")
        latest_contract = user_contracts.last()

        user_cheques = Cheque.objects.filter(user=self.user_state).order_by(
            "uploaded_at"
        )
        latest_cheque = user_cheques.last()

        if latest_contract:
            inline_keyboard.append([{
                "text": f"üì• –î–æ–≥–æ–≤–æ—Ä (–∑–∞–≥—Ä—É–∂–µ–Ω {latest_contract.uploaded_at.strftime('%d.%m.%Y')})",
                "url": f'{host_url}{latest_contract.file.url}',
            }])
        else:
            inline_keyboard.append([{
                "text": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä",
            }])

        if latest_cheque:
            inline_keyboard.append(
                [{
                    "text": f"üì• –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–µ–∫ (–∑–∞–≥—Ä—É–∂–µ–Ω {latest_contract.uploaded_at.strftime('%d.%m.%Y')})",
                    "url": f'{host_url}{latest_cheque.file.url}',
                }]
            )
        else:
            inline_keyboard.append({
                "text": "–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫",
            })

        send_message("sendMessage", {
            'chat_id': self.chat_id,
            'text': f"–î–æ–∫—É–º–µ–Ω—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏",
            "reply_markup": {
                "inline_keyboard": inline_keyboard
            }
        })

        required_count = int(
            Settings.get_setting("circle_required_count", "4"))
        user_circes_count = Circle.objects.filter(
            uploaded_at__gte=first_day_of_previous_month,
            user=self.user_state).count()
        send_message("sendMessage", {
            'chat_id': self.chat_id,
            'text': f"–ö—Ä—É–∂–∫–∏: {user_circes_count}/{required_count}",
        })

    def handle_document(self, file_id):
        if self.user_state.state == 'waiting_for_contract':
            download_and_save_telegram_file(file_id, self.user_state,
                                            "contract")
            self.user_state.has_contract = True
            self.user_state.state = None
            self.user_state.save()

            send_message("sendMessage", {
                'chat_id': self.chat_id,
                'text': "‚úÖ –î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!",
                'reply_markup': get_main_keyboard(self.user_state)
            })

        elif self.user_state.state == 'waiting_for_receipt':
            download_and_save_telegram_file(file_id, self.user_state,
                                            "receipt")
            self.user_state.state = None
            self.user_state.save()

            send_message("sendMessage", {
                'chat_id': self.chat_id,
                'text': "‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!",
                'reply_markup': get_main_keyboard(self.user_state)
            })

    def handle_video_note(self, file_id):
        now_date_minus_day = timezone.now() - datetime.timedelta(hours=24)
        user_today_circles = Circle.objects.filter(
            user=self.user_state,
            uploaded_at__gte=now_date_minus_day).order_by("uploaded_at")
        if user_today_circles.exists():
            latest_circle_date = user_today_circles.last().uploaded_at
            wait_timedelta = calc_timedelta_between_dates(
                latest_circle_date, now_date_minus_day)
            print(f"now_date_minus_day {now_date_minus_day}")
            print(f"latest_circle_date {latest_circle_date}")
            print(wait_timedelta)
            send_message("sendMessage", {
                'chat_id': self.chat_id,
                'text': f"–í—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏ –∫—Ä—É–∂–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {wait_timedelta}"
            })
        else:
            download_and_save_telegram_file(file_id, self.user_state, "circle")
            save_circle(file_id, self.chat_id)
            send_message("sendMessage", {
                'chat_id': self.chat_id,
                'text': "–ö—Ä—É–∂–æ–∫ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
            })

    def handle_unknown_command(self):
        send_message("sendMessage", {
            'chat_id': self.chat_id,
            'text': "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."
        })
