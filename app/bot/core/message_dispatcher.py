from bot.core.base import handle_callback_query
from bot.core.message_handler import TelegramBotHandler
from bot.tasks import send_message
from project.logging_settings import info_logger


class TelegramBotDispatcher:
    def dispatch(self, message):
        if "callback_query" in message:
            return handle_callback_query(message)

        handler = TelegramBotHandler(message)
        if handler.text == '/start':
            info_logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /start\n{message}\n")
            handler.handle_start()
        elif handler.user_state.banned:
            info_logger.info(f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç—É—á–∏—Ç—Å—è\n{message}\n")
            handler.handle_banned()
        elif handler.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
            info_logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n{message}\n")
            handler.handle_registration()
        elif handler.user_state.state == 'waiting_for_email':
            info_logger.info(f"–í–≤–æ–¥ e-mail\n{message}\n")
            handler.handle_waiting_for_email()
        elif handler.user_state.state == 'waiting_for_code':
            info_logger.info(f"–í–≤–æ–¥ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n{message}\n")
            handler.handle_waiting_for_code()
        elif handler.user_state.state == "waiting_for_name":
            info_logger.info(f"–í–≤–æ–¥ –∏–º–µ–Ω–∏\n{message}\n")
            handler.handle_waiting_for_name()
        elif not handler.user_state.is_registered:
            info_logger.info(
                f"–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–µ—Ç –ø—ã—Ç–∞–µ—Ç—Å—è\n{message}\n")
            send_message("sendMessage", {
                'chat_id': handler.chat_id,
                'text': "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã"
            })
        elif handler.text == "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å":
            info_logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞\n{message}\n")
            handler.handle_status()
        elif handler.text in ["–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä", "–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä"]:
            info_logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞\n{message}\n")
            send_message("sendMessage", {
                'chat_id': handler.chat_id,
                'text': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º.",
                'reply_markup': {
                    "keyboard": [
                        [{"text": "üîô –û—Ç–º–µ–Ω–∞"}]
                    ],
                }
            })
            handler.user_state.state = 'waiting_for_contract'
            handler.user_state.save()
        elif handler.text.startswith("–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫"):
            info_logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞\n{message}\n")
            send_message("sendMessage", {
                'chat_id': handler.chat_id,
                'text': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å —á–µ–∫–æ–º.",
                'reply_markup': {
                    "keyboard": [
                        [{"text": "üîô –û—Ç–º–µ–Ω–∞"}]
                    ],
                }
            })
            handler.user_state.state = 'waiting_for_receipt'
            handler.user_state.save()
        elif (
                handler.user_state.state == "waiting_for_contract" or handler.user_state.state == "waiting_for_receipt") and handler.text == "üîô –û—Ç–º–µ–Ω–∞":
            info_logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥\n{message}\n")
            handler.handle_go_back()
        elif 'document' in message['message']:
            info_logger.info(f"–§–∞–π–ª –ø—Ä–∏–ª–µ—Ç–µ–ª\n{message}\n")
            file_id = message['message']['document']['file_id']
            handler.handle_document(file_id)
        elif 'video_note' in message['message']:
            info_logger.info(f"–ö—Ä—É–∂–æ–∫ –ø—Ä–∏–ª–µ—Ç–µ–ª\n{message}\n")
            file_id = message['message']['video_note']['file_id']
            handler.handle_video_note(file_id)
        else:
            info_logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n{message}\n")
            handler.handle_unknown_command()
