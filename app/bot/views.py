import datetime
import json
import random
import traceback

from django.http import HttpResponse
from django.utils.timezone import now
from django.views.decorators.csrf import csrf_exempt

from bot.bot_util import send_message, save_circle, \
    download_and_save_telegram_file, get_main_keyboard, validate_name, \
    is_corporate_email, calc_timedelta_between_dates
from bot.models.cheque import Cheque
from bot.models.circle import Circle
from bot.models.contract import Contract
from bot.models.report import Report
from bot.models.user_state import UserState
from bot.tasks import send_email, send_message_to_user_generic
from project.settings import TELEGRAM_API_URL
from settings.models import Settings
import requests
from django.utils import timezone


@csrf_exempt
def telegram_bot(request):
    if request.method == 'POST':
        message = json.loads(request.body.decode('utf-8'))
        if "callback_query" in message:
            return handle_callback_query(message)
        chat_id = message['message']['chat']['id']
        text = message['message'].get('text', '')

        user_state, _ = UserState.objects.get_or_create(chat_id=chat_id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        if text == '/start':
            send_message("sendMessage", {
                'chat_id': chat_id,
                'text': "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                'reply_markup': json.dumps({
                    "keyboard": [
                        [{"text": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"}],
                    ],
                    "resize_keyboard": True,
                    "one_time_keyboard": True
                })
            })
            user_state.state = None
            user_state.save()

        elif text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
            send_message("sendMessage", {
                'chat_id': chat_id,
                'text': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã.",
                'reply_markup': json.dumps({"remove_keyboard": True})
            })
            user_state.state = 'waiting_for_email'
            user_state.save()

        elif user_state.state == 'waiting_for_email':
            if is_corporate_email(text):
                code = str(random.randint(100000, 999999))
                send_email.delay(text, code)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ –ø–æ—á—Ç—É
                send_message("sendMessage", {
                    'chat_id': chat_id,
                    'text': f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {text}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ."
                })
                user_state.email = text
                user_state.confirmation_code = code
                user_state.state = 'waiting_for_code'
                user_state.save()
            else:
                send_message("sendMessage", {
                    'chat_id': chat_id,
                    'text': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã."
                })

        elif user_state.state == 'waiting_for_code':
            if text == user_state.confirmation_code:
                user_state.state = "waiting_for_name"
                user_state.save()

                send_message("sendMessage", {
                    'chat_id': chat_id,
                    'text': "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è.\n–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü–µ—Ç—Ä–æ–≤ –ü—ë—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á' –∏–ª–∏ '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤'",
                })

            else:
                send_message("sendMessage", {
                    'chat_id': chat_id,
                    'text': "–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                })
        elif user_state.state == "waiting_for_name":
            if validate_name(text):
                user_state.state = ""
                user_state.is_registered = True
                user_state.name = text
                user_state.save()

                send_message("sendMessage", {
                    'chat_id': chat_id,
                    'text': "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!",
                })
                send_message("sendMessage", {
                    'chat_id': chat_id,
                    'text': "–¢–µ–ø–µ—Ä—å –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —á–µ–∫",
                    'reply_markup': get_main_keyboard(user_state)
                })
            else:
                send_message("sendMessage", {
                    'chat_id': chat_id,
                    'text': "–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                })

        elif not user_state.is_registered:
            send_message("sendMessage", {
                'chat_id': chat_id,
                'text': "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã"
            })
        elif text == "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å":
            today = timezone.now().date()
            first_day_of_current_month = today.replace(day=1)
            first_day_of_previous_month = (
                    first_day_of_current_month - datetime.timedelta(
                days=1)).replace(
                day=1)
            host_url = Settings.get_setting("HOST_URL",
                                            "http://localhost:8000")

            send_message("sendMessage", {
                'chat_id': chat_id,
                'text': f"–í–∞—à–µ –∏–º—è: {user_state.name}"
            })

            inline_keyboard = []

            user_contracts = Contract.objects.filter(user=user_state).order_by(
                "uploaded_at")
            latest_contract = user_contracts.last()

            user_cheques = Cheque.objects.filter(user=user_state).order_by(
                "uploaded_at"
            )
            latest_cheque = user_cheques.last()

            if latest_contract:
                inline_keyboard.append([{
                    "text": f"üì• –î–æ–≥–æ–≤–æ—Ä (–∑–∞–≥—Ä—É–∂–µ–Ω {latest_contract.uploaded_at.strftime('%d.%m.%Y')})",
                    "url": f'{host_url}{latest_contract.file.url}',
                }])
            else:
                inline_keyboard.append([{
                    "text": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä",
                }])

            if latest_cheque:
                inline_keyboard.append(
                    [{
                        "text": f"üì• –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–µ–∫ (–∑–∞–≥—Ä—É–∂–µ–Ω {latest_contract.uploaded_at.strftime('%d.%m.%Y')})",
                        "url": f'{host_url}{latest_cheque.file.url}',
                    }]
                )
            else:
                inline_keyboard.append({
                    "text": "–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫",
                })

            send_message("sendMessage", {
                'chat_id': chat_id,
                'text': f"–î–æ–∫—É–º–µ–Ω—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏",
                "reply_markup": {
                    "inline_keyboard": inline_keyboard
                }
            })

            required_count = int(
                Settings.get_setting("circle_required_count", "4"))
            user_circes_count = Circle.objects.filter(
                uploaded_at__gte=first_day_of_previous_month,
                user=user_state).count()
            send_message("sendMessage", {
                'chat_id': chat_id,
                'text': f"–ö—Ä—É–∂–∫–∏: {user_circes_count}/{required_count}",
            })
        elif text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä":
            send_message("sendMessage", {
                'chat_id': chat_id,
                'text': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º."
            })
            user_state.state = 'waiting_for_contract'
            user_state.save()

        elif text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫":
            send_message("sendMessage", {
                'chat_id': chat_id,
                'text': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å —á–µ–∫–æ–º."
            })
            user_state.state = 'waiting_for_receipt'
            user_state.save()

        elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä":
            send_message("sendMessage", {
                'chat_id': chat_id,
                'text': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º."
            })
            user_state.state = 'waiting_for_contract'
            user_state.save()
        elif text.startswith("–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫"):
            send_message("sendMessage", {
                'chat_id': chat_id,
                'text': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å —á–µ–∫–æ–º."
            })
            user_state.state = 'waiting_for_receipt'
            user_state.save()


        elif 'document' in message['message']:
            file_id = message['message']['document']['file_id']

            if user_state.state == 'waiting_for_contract':

                download_and_save_telegram_file(file_id, user_state,
                                                "contract")
                user_state.has_contract = True  # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥
                user_state.state = None
                user_state.save()

                send_message("sendMessage", {
                    'chat_id': chat_id,
                    'text': "‚úÖ –î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!",
                    'reply_markup': get_main_keyboard(user_state)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                })

            elif user_state.state == 'waiting_for_receipt':
                download_and_save_telegram_file(file_id, user_state, "receipt")
                user_state.state = None
                user_state.save()

                send_message("sendMessage", {
                    'chat_id': chat_id,
                    'text': "‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!",
                    'reply_markup': get_main_keyboard(user_state)
                })

        elif 'video_note' in message['message']:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä—É–∂–∫–æ–≤
            now_date_minus_day = timezone.now() - datetime.timedelta(
                hours=24)
            file_id = message['message']['video_note']['file_id']
            user_today_circles = Circle.objects.filter(
                user=user_state,
                uploaded_at__gte=now_date_minus_day).order_by(
                "uploaded_at")
            if user_today_circles.exists():
                latest_circle_date = user_today_circles.last().uploaded_at
                wait_timedelta = calc_timedelta_between_dates(
                    now_date_minus_day, latest_circle_date)
                send_message("sendMessage", {
                    'chat_id': chat_id,
                    'text': f"–í—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏ –∫—Ä—É–∂–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {wait_timedelta}"
                })
            else:
                download_and_save_telegram_file(file_id, user_state,
                                                "circle")
                save_circle(file_id,
                            chat_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä—É–∂–∫–∞
                send_message("sendMessage", {
                    'chat_id': chat_id,
                    'text': "–ö—Ä—É–∂–æ–∫ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
                })
            return HttpResponse('ok')

        else:
            send_message("sendMessage", {
                'chat_id': chat_id,
                'text': "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."
            })

    return HttpResponse('ok')


def setwebhook(request):
    try:
        telegram_token = Settings.get_setting("TELEGRAM_TOKEN")
        host_url = Settings.get_setting("HOST_URL") + '/getpost/'
        url = TELEGRAM_API_URL + telegram_token + "/setWebhook?url=" + host_url
        response = requests.post(url).json()
        return HttpResponse(f"{response}")
    except Exception as e:
        return HttpResponse(f"Not set: {str(e)}")


def handle_callback_query(message):
    callback_data = message["callback_query"]["data"]
    chat_id = message["callback_query"]["message"]["chat"]["id"]
    user = UserState.objects.get(chat_id=chat_id)

    # Add a debug log to inspect callback_data
    print(f"Callback Data: {callback_data}")
    if callback_data.startswith("success_report_"):
        obj_id = int(callback_data.replace("success_report_", ""))
        obj = Report.objects.filter(id=obj_id).first()
        obj.confirmed_by.add(user)
        obj.save()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        send_message_to_user_generic({
            "chat_id": user.chat_id,
            "text": "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞."
        })

    return HttpResponse('ok')
